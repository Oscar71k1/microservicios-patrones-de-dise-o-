name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # üß© Job para microservicios (gateway, usuarios, pagos, catalogo)
  test-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        service: [gateway, usuarios, pagos, catalogo]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # 1Ô∏è‚É£ Instalaci√≥n de dependencias
    - name: Install dependencies
      run: |
        if [ "${{ matrix.service }}" = "gateway" ]; then
          cd gateway
        else
          cd microservicios/${{ matrix.service }}
        fi
        npm ci

    # 2Ô∏è‚É£ Linter (ESLint o Prettier)
    - name: Run ESLint
      run: |
        if [ "${{ matrix.service }}" = "gateway" ]; then
          cd gateway
        else
          cd microservicios/${{ matrix.service }}
        fi
        if npm run | grep -q lint; then
          npm run lint || echo "Linting failed for ${{ matrix.service }}"
        else
          echo "No lint script found for ${{ matrix.service }}"
        fi

    # 3Ô∏è‚É£ Pruebas unitarias con reporte de cobertura
    - name: Run unit tests with coverage
      run: |
        if [ "${{ matrix.service }}" = "gateway" ] || [ "${{ matrix.service }}" = "usuarios" ]; then
          cd $( [ "${{ matrix.service }}" = "gateway" ] && echo "gateway" || echo "microservicios/${{ matrix.service }}" )
          if npm run | grep -q test; then
            npm test -- --coverage --passWithNoTests || echo "Tests failed for ${{ matrix.service }}"
          else
            echo "No test script found for ${{ matrix.service }}"
          fi
        else
          echo "Tests skipped for ${{ matrix.service }}"
        fi

    - name: Upload test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-coverage
        path: |
          **/coverage/**

    # 4Ô∏è‚É£ Build de la aplicaci√≥n
    - name: Build microservice
      run: |
        if [ "${{ matrix.service }}" = "gateway" ]; then
          cd gateway
        else
          cd microservicios/${{ matrix.service }}
        fi
        if npm run | grep -q build; then
          npm run build || echo "Build failed for ${{ matrix.service }}"
        else
          echo "No build script found for ${{ matrix.service }}"
        fi


  # üé® Job para frontend (separado)
  frontend-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: cd frontend && npm ci

    - name: Run ESLint
      run: cd frontend && npm run lint || echo "Linting failed for frontend"

    # Pruebas unitarias con reporte
    - name: Run frontend tests with coverage
      run: |
        cd frontend
        if npm run | grep -q test; then
          npm test -- --coverage --passWithNoTests || echo "Tests failed for frontend"
        else
          echo "No test script found for frontend"
        fi

    - name: Upload test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: |
          **/coverage/**

    # Build de la app frontend
    - name: Build frontend
      run: cd frontend && npm run build || echo "Build failed for frontend"name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # üß© Job para microservicios (gateway, usuarios, pagos, catalogo)
  test-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        service: [gateway, usuarios, pagos, catalogo]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # 1Ô∏è‚É£ Instalaci√≥n de dependencias
    - name: Install dependencies
      run: |
        if [ "${{ matrix.service }}" = "gateway" ]; then
          cd gateway
        else
          cd microservicios/${{ matrix.service }}
        fi
        npm ci

    # 2Ô∏è‚É£ Linter (ESLint o Prettier)
    - name: Run ESLint
      run: |
        if [ "${{ matrix.service }}" = "gateway" ]; then
          cd gateway
        else
          cd microservicios/${{ matrix.service }}
        fi
        if npm run | grep -q lint; then
          npm run lint || echo "Linting failed for ${{ matrix.service }}"
        else
          echo "No lint script found for ${{ matrix.service }}"
        fi

    # 3Ô∏è‚É£ Pruebas unitarias con reporte de cobertura
    - name: Run unit tests with coverage
      run: |
        if [ "${{ matrix.service }}" = "gateway" ] || [ "${{ matrix.service }}" = "usuarios" ]; then
          cd $( [ "${{ matrix.service }}" = "gateway" ] && echo "gateway" || echo "microservicios/${{ matrix.service }}" )
          if npm run | grep -q test; then
            npm test -- --coverage --passWithNoTests || echo "Tests failed for ${{ matrix.service }}"
          else
            echo "No test script found for ${{ matrix.service }}"
          fi
        else
          echo "Tests skipped for ${{ matrix.service }}"
        fi

    - name: Upload test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-coverage
        path: |
          **/coverage/**

    # 4Ô∏è‚É£ Build de la aplicaci√≥n
    - name: Build microservice
      run: |
        if [ "${{ matrix.service }}" = "gateway" ]; then
          cd gateway
        else
          cd microservicios/${{ matrix.service }}
        fi
        if npm run | grep -q build; then
          npm run build || echo "Build failed for ${{ matrix.service }}"
        else
          echo "No build script found for ${{ matrix.service }}"
        fi


  # üé® Job para frontend (separado)
  frontend-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: cd frontend && npm ci

    - name: Run ESLint
      run: cd frontend && npm run lint || echo "Linting failed for frontend"

    # Pruebas unitarias con reporte
    - name: Run frontend tests with coverage
      run: |
        cd frontend
        if npm run | grep -q test; then
          npm test -- --coverage --passWithNoTests || echo "Tests failed for frontend"
        else
          echo "No test script found for frontend"
        fi

    - name: Upload test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: |
          **/coverage/**

    # Build de la app frontend
    - name: Build frontend
      run: cd frontend && npm run build || echo "Build failed for frontend"
